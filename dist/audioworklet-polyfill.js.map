{"version":3,"file":"audioworklet-polyfill.js","sources":["../src/index.js","../src/realm.js"],"sourcesContent":["/**\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\n\nimport { Realm } from './realm';\n\nconst BUFFER_SIZE = 256;\n\nif (typeof AudioWorkletNode !== 'function') {\n  window.AudioWorkletNode = function AudioWorkletNode (context, name) {\n    const processor = getProcessorsForContext(context)[name];\n\n    this.parameters = new Map();\n    if (processor.properties) {\n      for (let i = 0; i < processor.properties.length; i++) {\n        const prop = processor.properties[i];\n        const node = context.createGain().gain;\n        node.value = prop.defaultValue;\n        // @TODO there's no good way to construct the proxy AudioParam here\n        this.parameters.set(prop.name, node);\n      }\n    }\n\n    const inst = new processor.Processor({});\n\n    this.port = processor.port;\n    const scriptProcessor = context.createScriptProcessor(BUFFER_SIZE);\n    scriptProcessor.node = this;\n    scriptProcessor.processor = processor;\n    scriptProcessor.instance = inst;\n    scriptProcessor.onaudioprocess = onAudioProcess;\n    Object.defineProperty(this, '$$node', { value: scriptProcessor });\n  };\n\n  Object.defineProperties(window.AudioWorkletNode.prototype = Object.create(AudioNode.prototype), {\n    bufferSize: {\n      get () {\n        return this.$$node.bufferSize;\n      }\n    },\n    connect: { value (to) {\n      return this.$$node.connect(to);\n    } },\n    disconnect: { value () {\n      return this.$$node.disconnect();\n    } }\n  });\n\n  Object.defineProperty(AudioContext.prototype, 'audioWorklet', {\n    get () {\n      return this.$$audioWorklet || (this.$$audioWorklet = new window.AudioWorklet(this));\n    }\n  });\n\n  window.AudioWorklet = class AudioWorklet {\n    constructor (audioContext) {\n      this.$$context = audioContext;\n    }\n\n    addModule (url, options) {\n      return fetch(url).then(r => {\n        if (!r.ok) throw Error(r.status);\n        return r.text();\n      }).then(code => {\n        const mc = new MessageChannel();\n        const context = {\n          sampleRate: 0,\n          currentTime: 0,\n          AudioWorkletProcessor () { },\n          registerProcessor: (name, Processor) => {\n            const processors = getProcessorsForContext(this.$$context);\n            processors[name] = {\n              port: mc.port1,\n              context,\n              Processor,\n              properties: Processor.parameterDescriptors || []\n            };\n          },\n          postMessage (e) { mc.port2.postMessage(e); },\n          addEventListener (type, fn) { mc.port2.addEventListener(type, fn); },\n          removeEventListener (type, fn) { mc.port2.addEventListener(type, fn); }\n        };\n        Object.defineProperty(context, 'onmessage', {\n          get () { return mc.port2.onmessage; },\n          set (f) { mc.port2.onmessage = f; }\n        });\n        context.self = context;\n        const realm = new Realm(context, document.documentElement);\n        realm.exec(((options && options.transpile) || String)(code));\n        return null;\n      });\n    }\n  };\n}\n\nconst PARAMS = [];\n\nfunction onAudioProcess (e) {\n  const parameters = {};\n  let index = -1;\n  this.node.parameters.forEach((value, key) => {\n    const arr = PARAMS[++index] || (PARAMS[index] = new Float32Array(BUFFER_SIZE));\n    // @TODO proper values here if possible\n    arr.fill(value.value);\n    parameters[key] = arr;\n  });\n  this.processor.context.sampleRate = this.context.sampleRate;\n  this.processor.context.currentTime = this.context.currentTime;\n  const inputs = channelToArray(e.inputBuffer);\n  const outputs = channelToArray(e.outputBuffer);\n  this.instance.process([inputs], [outputs], parameters);\n\n  // @todo - keepalive\n  // let ret = this.instance.process([inputs], [outputs], parameters);\n  // if (ret === true) { }\n}\n\nfunction channelToArray (ch) {\n  const out = [];\n  for (let i = 0; i < ch.numberOfChannels; i++) {\n    out[i] = ch.getChannelData(i);\n  }\n  return out;\n}\n\nfunction getProcessorsForContext (audioContext) {\n  return audioContext.$$processors || (audioContext.$$processors = {});\n}\n","/**\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\n\nexport function Realm (scope, parentElement) {\n  const frame = document.createElement('iframe');\n  frame.style.cssText = 'position:absolute;left:0;top:-999px;width:1px;height:1px;';\n  parentElement.appendChild(frame);\n  const win = frame.contentWindow;\n  const doc = win.document;\n  let vars = 'var window,$hook';\n  for (const i in win) {\n    if (!(i in scope) && i !== 'eval') {\n      vars += ',';\n      vars += i;\n    }\n  }\n  for (const i in scope) {\n    vars += ',';\n    vars += i;\n    vars += '=self.';\n    vars += i;\n  }\n  const script = doc.createElement('script');\n  script.appendChild(doc.createTextNode(\n    `function $hook(self,console) {\"use strict\";\n        ${vars};return function() {return eval(arguments[0])}}`\n  ));\n  doc.body.appendChild(script);\n  this.exec = win.$hook(scope, console);\n}\n"],"names":["const","BUFFER_SIZE","AudioWorkletNode","window","context","name","processor","getProcessorsForContext","this","parameters","Map","properties","let","i","length","prop","node","createGain","gain","value","defaultValue","set","inst","Processor","port","scriptProcessor","createScriptProcessor","instance","onaudioprocess","onAudioProcess","Object","defineProperty","defineProperties","prototype","create","AudioNode","bufferSize","get","$$node","connect","to","disconnect","AudioContext","$$audioWorklet","AudioWorklet","audioContext","$$context","addModule","url","options","fetch","then","r","ok","Error","status","text","code","mc","MessageChannel","sampleRate","currentTime","AudioWorkletProcessor","registerProcessor","port1","parameterDescriptors","postMessage","e","port2","addEventListener","type","fn","removeEventListener","onmessage","f","self","scope","parentElement","frame","document","createElement","style","cssText","appendChild","win","contentWindow","doc","vars","script","createTextNode","body","documentElement","exec","transpile","String","PARAMS","index","forEach","key","arr","Float32Array","fill","inputs","channelToArray","inputBuffer","outputs","outputBuffer","process","ch","out","numberOfChannels","getChannelData","$$processors"],"mappings":"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"}